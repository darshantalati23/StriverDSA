1. BFS

// BFS traversal starting from source vertex
FUNCTION BFS(graph, startVertex):
    visited = new array of size N, initialized to false
    queue = new empty queue
    visited[startVertex] = true
    queue.enqueue(startVertex)

    WHILE queue is not empty:
        vertex = queue.dequeue()
        PRINT vertex

        FOR each neighbor of vertex:
            IF neighbor is not visited:
                visited[neighbor] = true
                queue.enqueue(neighbor)

-------

2. DFS
(a) Recursive:
// DFS traversal using recursion
FUNCTION DFS(graph, vertex, visited):
    visited[vertex] = true
    PRINT vertex

    FOR auto neighbor : graph[vertex]: // for each neighbor
        IF visited[neighbor] == false:
            DFS(graph, neighbor, visited)

(b) Iterative:
// DFS traversal using stack
FUNCTION DFSIterative(graph, startVertex):
    visited = new array of size N, initialized to false
    stack = new empty stack
    stack.push(startVertex)

    WHILE stack is not empty:
        vertex = stack.pop()
        IF visited[vertex] is false:
            PRINT vertex
            visited[vertex] = true

        FOR auto neighbor : graph[vertex]: // for each neighbor
            IF visited[neighbor] is false:
                stack.push(neighbor)

---------

3. Shortest Path

FUNCTION BFS_ShortestPath(graph, start, goal):
    Initialize empty set: visited
    Initialize queue: queue ‚Üê [(start, [start])]  // (current_node, path_so_far)

    WHILE queue is not empty:
        (current, path) = queue.dequeue()

        IF current == goal:
            RETURN path

        IF current NOT IN visited:
            visited.add(current)

            FOR each neighbor IN graph[current]:
                IF neighbor NOT IN visited:
                    queue.enqueue((neighbor, path + [neighbor]))

    RETURN "No path found"

------

IS-BIPARTITE-BFS(graph)
    n = number of vertices in graph
    
    // Initialize color array with -1 (uncolored)
    color[1...n] = {-1, -1, ..., -1}
    
    // Process each connected component
    for start = 1 to n
        // Skip if already colored
        if color[start] != -1
            continue
            
        // Start BFS from this vertex with color 0
        color[start] = 0
        queue = new Queue()
        queue.enqueue(start)
        
        // Standard BFS traversal
        while queue is not empty
            current = queue.dequeue()
            
            // Check all adjacent vertices
            for each neighbor of current
                // If uncolored, assign opposite color and enqueue
                if color[neighbor] == -1
                    color[neighbor] = 1 - color[current]  // Flip 0 to 1 or 1 to 0
                    queue.enqueue(neighbor)
                    
                // If already colored with same color as current, graph is not bipartite
                else if color[neighbor] == color[current]
                    return false
    
    // If we can color all vertices without conflicts, graph is bipartite
    return true